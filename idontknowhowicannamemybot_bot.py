import asyncio
import os
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.filters import Command
from deep_translator import GoogleTranslator
import speech_recognition as sr
from pydub import AudioSegment
import pytesseract
from PIL import Image

TOKEN = "8098113119:AAHmtZfeo8q9s2ne4uzzEdL-ghW_HW4ccdI"


bot = Bot(token=TOKEN)
dp = Dispatcher()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —è–∑—ã–∫–æ–≤ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
user_lang = {}
history = {}

# –ö–Ω–æ–ø–∫–∏ —è–∑—ã–∫–æ–≤
lang_buttons = InlineKeyboardMarkup(inline_keyboard=[
    [
        InlineKeyboardButton(text="üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="lang_ru"),
        InlineKeyboardButton(text="üá¨üáß –ê–Ω–≥–ª–∏–π—Å–∫–∏–π", callback_data="lang_en"),
        InlineKeyboardButton(text="üá©üá™ –ù–µ–º–µ—Ü–∫–∏–π", callback_data="lang_de"),
    ],
    [
        InlineKeyboardButton(text="üá™üá∏ –ò—Å–ø–∞–Ω—Å–∫–∏–π", callback_data="lang_es"),
        InlineKeyboardButton(text="üá´üá∑ –§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π", callback_data="lang_fr"),
    ]
])

@dp.message(Command("start"))
async def start(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏ —è–∑—ã–∫ –ø–µ—Ä–µ–≤–æ–¥–∞:", reply_markup=lang_buttons)

@dp.message(Command('history'))
async def show_history(message: types.Message):
    user_id = message.from_user.id
    user_history = history.get(user_id, [])

    if not user_history:
        await message.answer("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤.")
    else:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –ø–µ—Ä–µ–≤–æ–¥–æ–≤
        last_items = user_history[-5:]
        text = "\n\n".join(f"{i+1}. {item}" for i, item in enumerate(last_items))
        await message.answer(f"üïò –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥—ã:\n\n{text}")

@dp.callback_query(F.data.startswith("lang_"))
async def set_language(callback: types.CallbackQuery):
    lang_code = callback.data.split("_")[1]
    user_lang[callback.from_user.id] = lang_code
    await callback.message.answer(f"–í—ã–±—Ä–∞–Ω —è–∑—ã–∫: {lang_code.upper()}. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç, –≥–æ–ª–æ—Å–æ–≤–æ–µ –∏–ª–∏ —Ñ–æ—Ç–æ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞.")
    await callback.answer()

@dp.message(F.voice)
async def handle_voice(message: types.Message):
    uid = message.from_user.id
    target_lang = user_lang.get(uid)
    if not target_lang:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —è–∑—ã–∫ —á–µ—Ä–µ–∑ /start")
        return

    file = await bot.download(message.voice.file_id)
    with open('voice.ogg', 'wb') as f:
        f.write(file.read())

# –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è ogg –≤ wav
    sound = AudioSegment.from_file('voice.ogg')
    sound.export('voice.wav', format="wav")

    recognizer = sr.Recognizer()
    with sr.AudioFile('voice.wav') as source:
        audio_data = recognizer.record(source)
        try:
            text = recognizer.recognize_google(audio_data, language="ru-RU")
            translated = GoogleTranslator(source='auto', target=target_lang).translate(text)
            user_id = message.from_user.id
            if user_id not in history:
                history[user_id] = []
            history[user_id].append(translated)
            await message.answer(f"–¢–µ–∫—Å—Ç –∏–∑ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ:\n{text}\n\n–ü–µ—Ä–µ–≤–æ–¥:\n{translated}")
            await message.answer("–•–æ—á–µ—à—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –µ—â—ë? –í—ã–±–µ—Ä–∏ —è–∑—ã–∫ —Å–Ω–æ–≤–∞:", reply_markup=lang_buttons)
        except Exception as e:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
            print("–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è:", e)

    # –ß–∏—Å—Ç–∏–º —Ñ–∞–π–ª—ã
    os.remove('voice.ogg')
    os.remove('voice.wav')

@dp.message(F.photo)
async def handle_photo(message: types.Message):
    uid = message.from_user.id
    target_lang = user_lang.get(uid, "en")

    # –ü–æ–ª—É—á–∞–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ
    photo = message.photo[-1]

    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª —á–µ—Ä–µ–∑ bot.download
    file = await bot.download(photo.file_id)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
    with open("photo.jpg", "wb") as f:
        f.write(file.read())

    await message.answer("–§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ! –°–µ–π—á–∞—Å –ø–æ–ø—ã—Ç–∞—é—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç...")

    image = Image.open("photo.jpg")
    custom_config = r'--oem 3 --psm 6'
    text = pytesseract.image_to_string(image, config=custom_config)
    clean_text = ' '.join(text.strip().splitlines())

    if text.strip():
        translated = GoogleTranslator(source='auto', target=target_lang).translate(clean_text)
        user_id = message.from_user.id
        if user_id not in history:
            history[user_id] = []
        history[user_id].append(translated)
        await message.answer(f"–¢–µ–∫—Å—Ç –Ω–∞ —Ñ–æ—Ç–æ:\n{clean_text}\n\n–ü–µ—Ä–µ–≤–æ–¥:\n{translated}")
        await message.answer("–•–æ—á–µ—à—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –µ—â—ë? –í—ã–±–µ—Ä–∏ —è–∑—ã–∫ —Å–Ω–æ–≤–∞:", reply_markup=lang_buttons)
    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–µ–∫—Å—Ç –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏.")

    # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª
    os.remove("photo.jpg")

@dp.message(F.text)
async def handle_text(message: types.Message):
    uid = message.from_user.id
    target_lang = user_lang.get(uid)

    if not target_lang:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —è–∑—ã–∫ —á–µ—Ä–µ–∑ /start")
        return

    try:
        translated = GoogleTranslator(source='auto', target=target_lang).translate(message.text)
        user_id = message.from_user.id
        if user_id not in history:
            history[user_id] = []
        history[user_id].append(translated)
        await message.answer(f"–ü–µ—Ä–µ–≤–æ–¥:\n{translated}")
        await message.answer("–•–æ—á–µ—à—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –µ—â—ë? –í—ã–±–µ—Ä–∏ —è–∑—ã–∫ —Å–Ω–æ–≤–∞:", reply_markup=lang_buttons)
    except Exception as e:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ.")
        print("–û—à–∏–±–∫–∞:", e)

# –ó–∞–ø—É—Å–∫
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())